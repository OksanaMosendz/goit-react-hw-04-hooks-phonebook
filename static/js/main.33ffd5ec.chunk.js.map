{"version":3,"sources":["components/ContactForm/ContactForm.styled.jsx","components/ContactForm/ContactForm.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/App.jsx","index.js"],"names":["Form","styled","form","Label","label","ContactForm","state","name","number","HandleNameInput","e","setState","target","value","HandleNumberInput","FormSubmit","preventDefault","props","onSubmit","this","type","onChange","pattern","title","required","React","Component","Filter","onChangeFilter","filter","Button","button","Li","li","P","p","ContactList","contacts","onClickDelete","filteredContacts","contact","toLowerCase","includes","length","map","id","onClick","App","HandleSearchContactByName","HandleFormSubmit","some","alert","push","uuidv4","HandleClickDelete","forEach","index","splice","parseLocalContacts","JSON","parse","localStorage","getItem","setItem","stringify","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.33ffd5ec.chunk.js","sourcesContent":["import styled from '@emotion/styled';\r\n\r\nexport const Form = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n  border: 1px black solid;\r\n  padding: 30px;\r\n  width: 300px;\r\n`;\r\n\r\nexport const Label = styled.label`\r\n  display: flex;\r\n  margin-bottom: 20px;\r\n  flex-direction: column;\r\n`;\r\n","import React from 'react';\r\nimport { Form, Label } from './ContactForm.styled';\r\n\r\nexport class ContactForm extends React.Component {\r\n  state = {\r\n    name: '',\r\n    number: '',\r\n  };\r\n\r\n  HandleNameInput = e => {\r\n    this.setState({ name: e.target.value });\r\n  };\r\n\r\n  HandleNumberInput = e => {\r\n    this.setState({ number: e.target.value });\r\n  };\r\n\r\n  FormSubmit = e => {\r\n    const { name, number } = this.state;\r\n    e.preventDefault();\r\n    this.props.onSubmit(name, number);\r\n    this.setState({ name: '', number: '' });\r\n  };\r\n\r\n  render() {\r\n    const { name, number } = this.state;\r\n    return (\r\n      <Form onSubmit={this.FormSubmit}>\r\n        <Label>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            name=\"name\"\r\n            value={name}\r\n            onChange={this.HandleNameInput}\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </Label>\r\n\r\n        <Label>\r\n          Number\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            value={number}\r\n            onChange={this.HandleNumberInput}\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </Label>\r\n\r\n        <button type=\"submit\">Add contact</button>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n","import styled from '@emotion/styled';\r\n\r\nexport const Label = styled.label`\r\n  display: inline-flex;\r\n  flex-direction: column;\r\n  width: 300px;\r\n  padding-left: 30px;\r\n  padding-right: 30px;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Label } from './Filter.styled';\r\nexport const Filter = ({ onChangeFilter, filter }) => {\r\n  return (\r\n    <Label>\r\n      Find contacts by name\r\n      <input\r\n        type=\"text\"\r\n        value={filter}\r\n        onChange={onChangeFilter}\r\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n        required\r\n      />\r\n    </Label>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onChangeFilter: PropTypes.func.isRequired,\r\n};\r\n","import styled from '@emotion/styled';\r\nexport const Button = styled.button`\r\n  margin-left: 10px;\r\n  height: 30px;\r\n  display: inline-block;\r\n`;\r\n\r\nexport const Li = styled.li`\r\n  align-items: center;\r\n  list-style-type: circle;\r\n  list-style-color: black;\r\n`;\r\n\r\nexport const P = styled.p`\r\n  display: inline-block;\r\n`;\r\n","import PropTypes from 'prop-types';\r\nimport { Button, Li, P } from './ContactList.styled';\r\n\r\nexport const ContactList = ({ contacts, filter, onClickDelete }) => {\r\n  const filteredContacts = contacts.filter(contact =>\r\n    contact.name.toLowerCase().includes(filter.toLowerCase()),\r\n  );\r\n\r\n  return (\r\n    filteredContacts.length > 0 && (\r\n      <ul>\r\n        {filteredContacts.map(contact => (\r\n          <Li key={contact.id}>\r\n            <P>\r\n              {contact.name}:{contact.number}\r\n            </P>\r\n            <Button id={contact.id} type=\"button\" onClick={onClickDelete}>\r\n              Delete\r\n            </Button>\r\n          </Li>\r\n        ))}\r\n      </ul>\r\n    )\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  filter: PropTypes.string.isRequired,\r\n  onClickDelete: PropTypes.func.isRequired,\r\n  contacts: PropTypes.arrayOf(\r\n    PropTypes.exact({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    }),\r\n  ),\r\n};\r\n","import React from 'react';\r\n\r\nimport { ContactForm } from './ContactForm/ContactForm';\r\nimport { Filter } from './Filter/Filter';\r\nimport { ContactList } from './ContactList/ContactList';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\nexport class App extends React.Component {\r\n  state = {\r\n    contacts: [],\r\n    filter: '',\r\n  };\r\n\r\n  componentDidMount() {\r\n    const parseLocalContacts = JSON.parse(localStorage.getItem('contacts'));\r\n    if (parseLocalContacts) {\r\n      this.setState({ contacts: parseLocalContacts });\r\n    }\r\n  }\r\n\r\n  componentDidUpdate() {\r\n    const { contacts } = this.state;\r\n    localStorage.setItem('contacts', JSON.stringify(contacts));\r\n  }\r\n\r\n  HandleSearchContactByName = e => {\r\n    this.setState({ filter: e.target.value });\r\n  };\r\n\r\n  HandleFormSubmit = (name, number) => {\r\n    const { contacts } = this.state;\r\n    const isInList = contacts.some(contact => contact.name.toLowerCase() === name.toLowerCase());\r\n\r\n    isInList\r\n      ? alert(name + ' is already in contacts.')\r\n      : contacts.push({ name: name, id: uuidv4(), number: number });\r\n\r\n    this.setState({ contacts: contacts });\r\n  };\r\n\r\n  HandleClickDelete = e => {\r\n    const { contacts } = this.state;\r\n    contacts.forEach((contact, index) => contact.id === e.target.id && contacts.splice(index, 1));\r\n    this.setState({ contacts: contacts });\r\n  };\r\n\r\n  render() {\r\n    const { contacts, filter } = this.state;\r\n\r\n    return (\r\n      <>\r\n        <h1>Phonebook</h1>\r\n        <ContactForm contacts={contacts} onSubmit={this.HandleFormSubmit} />\r\n        <h2>Contacts</h2>\r\n        <Filter onChangeFilter={this.HandleSearchContactByName} filter={filter} />\r\n        <ContactList filter={filter} contacts={contacts} onClickDelete={this.HandleClickDelete} />\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { App } from './components/App.jsx';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}